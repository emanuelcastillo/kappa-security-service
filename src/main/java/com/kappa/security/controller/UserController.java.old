package com.kappa.security.controller;

import com.kappa.security.entity.UserEntity;
import com.kappa.security.repository.UserRepository;
import com.kappa.security.service.JwtService;
import lombok.AllArgsConstructor;
import org.apache.catalina.User;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.Optional;

@RestController
@AllArgsConstructor
@RequestMapping("/api/v1")
public class UserController {
    public record Welcome(String username, String message, LocalDateTime dateTime){};


    //private final AuthenticationManager authenticationManager;
    //private final JwtUserDetailsService jwtUserDetailsService;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;

    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/welcome")
    //@PostAuthorize("value")
    public Welcome welcome(){
        return new Welcome("Kappa", "Bienvenido", LocalDateTime.now());
    }

    /*
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody JwtRequest jwtRequest){
        //this.authenticate(jwtRequest);
        //final var userDeails = this.jwtUserDetailsService.loadUserByUsername(jwtRequest.getUsername());

        //final var token = this.jwtService.generateToken(userDeails);

       // return ResponseEntity.ok(new JwtResponse(token));
        return null;
    }
     */

    @GetMapping("/user/{id}")
    public Optional<UserEntity> getUser(@PathVariable(name = "id") Long id){
       return this.userRepository.findById(id);
    }

    @PutMapping("/user/{id}")
    public ResponseEntity<?> updateUser(@RequestBody UserEntity requestDataUser, @PathVariable(name = "id") Long id){
        Optional<UserEntity> storageUser = this.userRepository.findById(id);
        if (storageUser.isPresent()){
            UserEntity _user = storageUser.get();
            _user.setUsername(requestDataUser.getUsername());
            _user.setPassword(this.passwordEncoder.encode(requestDataUser.getUsername()));
            return new ResponseEntity<>(this.userRepository.save(_user), HttpStatus.OK);
        }else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/user/{id}")
    public ResponseEntity<?> deleteUser(@PathVariable(name = "id") Long id){
        var user = this.userRepository.findById(id);
        if (user.isPresent()){
            this.userRepository.delete(user.get());
            return new ResponseEntity<>(HttpStatus.OK);
        }
        else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }


    /*
    private void authenticate(JwtRequest request){
        try {
            this.authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword()));
        }
        catch (BadCredentialsException | DisabledException e){
            throw new BadCredentialsException(e.getMessage());
        }
    }
     */
}
